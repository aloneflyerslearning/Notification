<html class="scroll-smooth" lang="en">
 <head>
  <meta charset="utf-8"/>
  <meta content="width=device-width, initial-scale=1" name="viewport"/>
  <title>
   ALONE FLYER'S LEARNING - Notifications
  </title>
  <script src="https://cdn.tailwindcss.com">
  </script>
  <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet"/>
  <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600&amp;family=Roboto+Slab&amp;display=swap" rel="stylesheet"/>
  <style>
   body {
      font-family: 'Poppins', sans-serif;
      background: #f9fafb;
      color: #1f2937;
    }
    h1, h2 {
      font-family: 'Roboto Slab', serif;
    }
    /* Scrollbar styling for notifications */
    #notificationsSection {
      max-height: 60vh;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: #3b82f6 #e5e7eb;
    }
    #notificationsSection::-webkit-scrollbar {
      width: 8px;
    }
    #notificationsSection::-webkit-scrollbar-track {
      background: #e5e7eb;
      border-radius: 4px;
    }
    #notificationsSection::-webkit-scrollbar-thumb {
      background-color: #3b82f6;
      border-radius: 4px;
      border: 2px solid #e5e7eb;
    }
    /* Notification animation */
    .notification-animate {
      animation: pulseHighlight 3s ease-in-out infinite;
    }
    @keyframes pulseHighlight {
      0%, 100% {
        box-shadow: 0 0 10px 0 rgba(59, 130, 246, 0.5);
        background-color: #e0f2fe;
      }
      50% {
        box-shadow: 0 0 20px 5px rgba(59, 130, 246, 0.8);
        background-color: #bae6fd;
      }
    }
    /* Image container styling */
    .notification-image {
      max-height: 180px;
      object-fit: contain;
      border-radius: 0.5rem;
      margin-top: 0.75rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.1);
      transition: transform 0.3s ease;
    }
    .notification-image:hover {
      transform: scale(1.05);
    }
    /* Scrollbar for textarea */
    textarea::-webkit-scrollbar {
      width: 8px;
    }
    textarea::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 4px;
    }
    textarea::-webkit-scrollbar-thumb {
      background: #3b82f6;
      border-radius: 4px;
    }
  </style>
 </head>
 <body class="min-h-screen flex flex-col">
  <header class="bg-gradient-to-r from-indigo-700 via-blue-700 to-cyan-600 text-white p-6 flex justify-between items-center shadow-lg">
   <div class="flex items-center gap-4">
    <img alt="Logo of ALONE FLYER'S LEARNING coaching, stylized letters AL in blue and white" class="rounded-full border-2 border-white" height="48" src="https://storage.googleapis.com/a1aa/image/da1d3b53-d684-417e-eac2-c810f3f870e3.jpg" width="48"/>
    <h1 class="text-3xl font-semibold tracking-wide drop-shadow-md select-none">
     ALONE FLYER'S LEARNING
    </h1>
   </div>
   <button aria-label="Open admin login panel" class="bg-white text-indigo-700 font-semibold px-4 py-2 rounded-lg shadow-md hover:bg-indigo-100 transition flex items-center gap-2" id="adminBtn" title="Admin Login">
    <i class="fas fa-user-shield">
    </i>
    Admin
   </button>
  </header>
  <main class="flex-grow max-w-4xl mx-auto p-6 w-full flex flex-col">
   <section class="mb-6 text-center">
    <h2 class="text-4xl font-semibold text-indigo-700 mb-2 drop-shadow-sm">
     Notifications
    </h2>
    <p class="text-indigo-600 text-lg max-w-xl mx-auto leading-relaxed">
     Stay updated with the latest announcements and important information from ALONE FLYER'S LEARNING coaching.
    </p>
   </section>
   <section aria-label="List of coaching notifications" aria-live="polite" class="space-y-5 bg-white rounded-lg shadow-lg p-6 border border-gray-200" id="notificationsSection">
    <!-- Notifications will be loaded here -->
   </section>
  </main>
  <!-- Admin Modal -->
  <div aria-labelledby="adminModalTitle" aria-modal="true" class="fixed inset-0 bg-black bg-opacity-60 flex items-center justify-center p-4 hidden z-50" id="adminModal" role="dialog">
   <div class="bg-white rounded-xl shadow-2xl w-full max-w-3xl p-8 relative max-h-[90vh] overflow-y-auto">
    <button aria-label="Close admin modal" class="absolute top-4 right-4 text-gray-500 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-indigo-600 rounded" id="closeAdminModal">
     <i class="fas fa-times text-2xl">
     </i>
    </button>
    <h2 class="text-3xl font-semibold mb-6 text-indigo-700 text-center select-none" id="adminModalTitle">
     Admin Panel
    </h2>
    <div class="space-y-4" id="loginSection">
     <label class="block text-lg font-medium text-gray-700 select-none" for="adminPassword">
      Enter Password
     </label>
     <input aria-describedby="loginError" autocomplete="off" class="w-full border border-gray-300 rounded-lg px-4 py-3 text-lg focus:outline-none focus:ring-2 focus:ring-indigo-600 transition" id="adminPassword" placeholder="Password" type="password"/>
     <button class="w-full bg-indigo-700 text-white py-3 rounded-lg hover:bg-indigo-800 transition font-semibold flex justify-center items-center gap-3" id="loginBtn" type="button">
      <i class="fas fa-sign-in-alt">
      </i>
      Login
     </button>
     <p class="text-red-600 mt-2 text-center font-medium hidden select-none" id="loginError" role="alert">
      Incorrect password.
     </p>
    </div>
    <div class="hidden space-y-6" id="adminPanel">
     <form id="notificationForm" class="space-y-4" novalidate>
      <input id="notificationId" name="notificationId" type="hidden" value=""/>
      <label class="block text-lg font-medium text-gray-700 select-none" for="newNotification">
       Notification Text
      </label>
      <textarea aria-label="Notification text" class="w-full border border-gray-300 rounded-lg px-4 py-3 text-lg resize-y focus:outline-none focus:ring-2 focus:ring-indigo-600 transition" id="newNotification" name="newNotification" placeholder="Enter notification text here..." rows="5" required></textarea>
      <label class="block text-lg font-medium text-gray-700 select-none" for="imageUrl">
       Image URL (optional)
      </label>
      <input aria-label="Image URL for notification" class="w-full border border-gray-300 rounded-lg px-4 py-3 text-lg focus:outline-none focus:ring-2 focus:ring-indigo-600 transition" id="imageUrl" name="imageUrl" placeholder="https://example.com/image.jpg" type="url" pattern="https?://.+" />
      <label class="block text-lg font-medium text-gray-700 select-none" for="imageFile">
       Or Upload Image (optional)
      </label>
      <input aria-label="Upload image file for notification" accept="image/*" class="w-full border border-gray-300 rounded-lg px-4 py-2 text-lg focus:outline-none focus:ring-2 focus:ring-indigo-600 transition cursor-pointer" id="imageFile" name="imageFile" type="file" />
      <div class="flex justify-between items-center">
       <button class="bg-green-600 text-white px-5 py-3 rounded-lg hover:bg-green-700 transition font-semibold flex items-center gap-3" id="publishBtn" type="submit">
        <i class="fas fa-upload">
        </i>
        Publish
       </button>
       <button class="bg-gray-600 text-white px-5 py-3 rounded-lg hover:bg-gray-700 transition font-semibold flex items-center gap-3 hidden" id="updateBtn" type="submit">
        <i class="fas fa-edit">
        </i>
        Update
       </button>
       <button class="bg-red-600 text-white px-5 py-3 rounded-lg hover:bg-red-700 transition font-semibold flex items-center gap-3" id="logoutBtn" type="button">
        <i class="fas fa-sign-out-alt">
        </i>
        Logout
       </button>
      </div>
     </form>
     <section aria-label="List of notifications for editing" class="mt-8 max-h-72 overflow-y-auto border border-gray-300 rounded-lg p-4 bg-indigo-50 shadow-inner" id="adminNotificationsList">
      <!-- Admin notifications list -->
     </section>
    </div>
   </div>
  </div>
  <footer class="bg-gradient-to-r from-indigo-700 via-blue-700 to-cyan-600 text-white text-center p-4 text-sm select-none">
   Â© 2024 ALONE FLYER'S LEARNING. All rights reserved.
  </footer>
  <script>
   (() => {
      const PASSWORD = '#1';
      const adminBtn = document.getElementById('adminBtn');
      const adminModal = document.getElementById('adminModal');
      const closeAdminModal = document.getElementById('closeAdminModal');
      const loginSection = document.getElementById('loginSection');
      const adminPanel = document.getElementById('adminPanel');
      const loginBtn = document.getElementById('loginBtn');
      const logoutBtn = document.getElementById('logoutBtn');
      const loginError = document.getElementById('loginError');
      const adminPassword = document.getElementById('adminPassword');
      const newNotification = document.getElementById('newNotification');
      const imageUrlInput = document.getElementById('imageUrl');
      const imageFileInput = document.getElementById('imageFile');
      const publishBtn = document.getElementById('publishBtn');
      const updateBtn = document.getElementById('updateBtn');
      const notificationsSection = document.getElementById('notificationsSection');
      const notificationForm = document.getElementById('notificationForm');
      const notificationIdInput = document.getElementById('notificationId');
      const adminNotificationsList = document.getElementById('adminNotificationsList');

      // Load notifications from localStorage or initialize empty array
      function loadNotifications() {
        const data = localStorage.getItem('coachingNotifications');
        if (!data) return [];
        try {
          return JSON.parse(data);
        } catch {
          return [];
        }
      }

      // Save notifications array to localStorage
      function saveNotifications(notifications) {
        localStorage.setItem('coachingNotifications', JSON.stringify(notifications));
      }

      // Escape HTML to prevent injection
      function escapeHtml(text) {
        return text
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#039;');
      }

      // Render notifications on public page
      function renderNotifications() {
        const notifications = loadNotifications();
        notificationsSection.innerHTML = '';
        if (notifications.length === 0) {
          notificationsSection.innerHTML =
            '<p class="text-center text-gray-500 italic select-none">No notifications published yet.</p>';
          return;
        }
        notifications
          .slice()
          .reverse()
          .forEach((note, i) => {
            const noteEl = document.createElement('article');
            noteEl.className =
              'bg-indigo-50 border border-indigo-300 p-5 rounded-lg shadow-sm hover:shadow-lg transition cursor-default select-text notification-animate';
            noteEl.innerHTML = `
              <div class="flex justify-between items-center mb-3">
                <time class="text-xs text-indigo-400 font-mono" datetime="${note.date}" title="Published date and time">
                  ${new Date(note.date).toLocaleString(undefined, {
                    dateStyle: 'medium',
                    timeStyle: 'short',
                  })}
                </time>
              </div>
              <p class="text-indigo-900 whitespace-pre-line text-lg leading-relaxed">${escapeHtml(note.text)}</p>
              ${
                note.imageUrl
                  ? `<img src="${escapeHtml(note.imageUrl)}" alt="Notification image showing relevant coaching content or announcement" class="notification-image" loading="lazy" />`
                  : ''
              }
            `;
            notificationsSection.appendChild(noteEl);
          });
      }

      // Render notifications list in admin panel with edit/delete buttons
      function renderAdminNotificationsList() {
        const notifications = loadNotifications();
        adminNotificationsList.innerHTML = '';
        if (notifications.length === 0) {
          adminNotificationsList.innerHTML =
            '<p class="text-center text-gray-600 italic select-none">No notifications available.</p>';
          return;
        }
        notifications
          .slice()
          .reverse()
          .forEach((note, i) => {
            // Calculate original index for editing/deleting
            const originalIndex = notifications.length - 1 - i;
            const item = document.createElement('div');
            item.className =
              'bg-white border border-indigo-300 rounded-lg p-3 mb-3 shadow-sm flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3';
            item.innerHTML = `
              <div class="flex-1 min-w-0">
                <time class="block text-xs text-indigo-500 font-mono mb-1" datetime="${note.date}" title="Published date and time">
                  ${new Date(note.date).toLocaleString(undefined, {
                    dateStyle: 'medium',
                    timeStyle: 'short',
                  })}
                </time>
                <p class="text-indigo-900 whitespace-pre-line truncate max-w-full">${escapeHtml(note.text)}</p>
                ${
                  note.imageUrl
                    ? `<img src="${escapeHtml(note.imageUrl)}" alt="Notification image preview" class="mt-2 max-h-24 rounded-md object-contain shadow-sm" loading="lazy" />`
                    : ''
                }
              </div>
              <div class="flex gap-2 flex-shrink-0">
                <button aria-label="Edit notification" class="editBtn bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-lg transition flex items-center gap-2" data-index="${originalIndex}" type="button">
                  <i class="fas fa-edit"></i> Edit
                </button>
                <button aria-label="Delete notification" class="deleteBtn bg-red-600 hover:bg-red-700 text-white px-3 py-1 rounded-lg transition flex items-center gap-2" data-index="${originalIndex}" type="button">
                  <i class="fas fa-trash-alt"></i> Delete
                </button>
              </div>
            `;
            adminNotificationsList.appendChild(item);
          });
      }

      // Show admin modal
      function showAdminModal() {
        adminModal.classList.remove('hidden');
        adminPassword.value = '';
        loginError.classList.add('hidden');
        loginSection.classList.remove('hidden');
        adminPanel.classList.add('hidden');
        resetForm();
        document.body.style.overflow = 'hidden';
      }

      // Hide admin modal
      function hideAdminModal() {
        adminModal.classList.add('hidden');
        document.body.style.overflow = '';
      }

      // Reset form to default state
      function resetForm() {
        notificationIdInput.value = '';
        newNotification.value = '';
        imageUrlInput.value = '';
        imageFileInput.value = '';
        publishBtn.classList.remove('hidden');
        updateBtn.classList.add('hidden');
      }

      // Handle login
      function handleLogin() {
        if (adminPassword.value === PASSWORD) {
          loginSection.classList.add('hidden');
          adminPanel.classList.remove('hidden');
          renderAdminNotificationsList();
          resetForm();
          newNotification.focus();
          loginError.classList.add('hidden');
        } else {
          loginError.classList.remove('hidden');
          adminPassword.select();
        }
      }

      // Handle logout
      function handleLogout() {
        loginSection.classList.remove('hidden');
        adminPanel.classList.add('hidden');
        adminPassword.value = '';
        loginError.classList.add('hidden');
        adminPassword.focus();
      }

      // Validate URL format (simple)
      function isValidUrl(url) {
        try {
          const parsed = new URL(url);
          return parsed.protocol === 'http:' || parsed.protocol === 'https:';
        } catch {
          return false;
        }
      }

      // Convert uploaded image file to base64 data URL
      function fileToDataUrl(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.onload = () => resolve(reader.result);
          reader.onerror = () => reject(new Error('Failed to read file'));
          reader.readAsDataURL(file);
        });
      }

      // Handle publish notification (new)
      async function handlePublish(e) {
        e.preventDefault();
        const text = newNotification.value.trim();
        const imageUrl = imageUrlInput.value.trim();
        const imageFile = imageFileInput.files[0];
        if (text.length === 0) {
          alert('Please enter a notification before publishing.');
          newNotification.focus();
          return;
        }
        if (imageUrl && !isValidUrl(imageUrl)) {
          alert('Please enter a valid image URL starting with http:// or https://');
          imageUrlInput.focus();
          return;
        }
        let finalImageUrl = '';
        if (imageFile) {
          try {
            finalImageUrl = await fileToDataUrl(imageFile);
          } catch {
            alert('Failed to read the uploaded image file.');
            return;
          }
        } else if (imageUrl) {
          finalImageUrl = imageUrl;
        }
        const notifications = loadNotifications();
        notifications.push({
          text,
          imageUrl: finalImageUrl,
          date: new Date().toISOString(),
        });
        saveNotifications(notifications);
        renderNotifications();
        renderAdminNotificationsList();
        resetForm();
        alert('Notification published successfully.');
      }

      // Handle update notification (edit)
      async function handleUpdate(e) {
        e.preventDefault();
        const id = notificationIdInput.value;
        if (id === '') {
          alert('No notification selected for update.');
          return;
        }
        const text = newNotification.value.trim();
        const imageUrl = imageUrlInput.value.trim();
        const imageFile = imageFileInput.files[0];
        if (text.length === 0) {
          alert('Please enter a notification before updating.');
          newNotification.focus();
          return;
        }
        if (imageUrl && !isValidUrl(imageUrl)) {
          alert('Please enter a valid image URL starting with http:// or https://');
          imageUrlInput.focus();
          return;
        }
        let finalImageUrl = '';
        if (imageFile) {
          try {
            finalImageUrl = await fileToDataUrl(imageFile);
          } catch {
            alert('Failed to read the uploaded image file.');
            return;
          }
        } else if (imageUrl) {
          finalImageUrl = imageUrl;
        }
        const notifications = loadNotifications();
        const index = parseInt(id, 10);
        if (isNaN(index) || index < 0 || index >= notifications.length) {
          alert('Invalid notification selected.');
          resetForm();
          return;
        }
        notifications[index].text = text;
        notifications[index].imageUrl = finalImageUrl;
        notifications[index].date = new Date().toISOString();
        saveNotifications(notifications);
        renderNotifications();
        renderAdminNotificationsList();
        resetForm();
        alert('Notification updated successfully.');
      }

      // Handle edit button click in admin list
      function handleEditClick(e) {
        if (!e.target.closest('.editBtn')) return;
        const btn = e.target.closest('.editBtn');
        const index = parseInt(btn.dataset.index, 10);
        if (isNaN(index)) return;
        const notifications = loadNotifications();
        if (index < 0 || index >= notifications.length) return;
        const note = notifications[index];
        notificationIdInput.value = index;
        newNotification.value = note.text;
        imageUrlInput.value = '';
        imageFileInput.value = '';
        if (note.imageUrl && note.imageUrl.startsWith('data:image')) {
          // If base64 image, clear URL input and file input (can't prefill file input)
          imageUrlInput.value = '';
        } else if (note.imageUrl) {
          imageUrlInput.value = note.imageUrl;
        }
        publishBtn.classList.add('hidden');
        updateBtn.classList.remove('hidden');
        newNotification.focus();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      }

      // Handle delete button click in admin list
      function handleDeleteClick(e) {
        if (!e.target.closest('.deleteBtn')) return;
        const btn = e.target.closest('.deleteBtn');
        const index = parseInt(btn.dataset.index, 10);
        if (isNaN(index)) return;
        if (!confirm('Are you sure you want to delete this notification? This action cannot be undone.')) return;
        const notifications = loadNotifications();
        if (index < 0 || index >= notifications.length) return;
        notifications.splice(index, 1);
        saveNotifications(notifications);
        renderNotifications();
        renderAdminNotificationsList();
        resetForm();
      }

      // Event listeners
      adminBtn.addEventListener('click', showAdminModal);
      closeAdminModal.addEventListener('click', hideAdminModal);
      loginBtn.addEventListener('click', handleLogin);
      logoutBtn.addEventListener('click', handleLogout);
      notificationForm.addEventListener('submit', (e) => {
        if (publishBtn.classList.contains('hidden')) {
          handleUpdate(e);
        } else {
          handlePublish(e);
        }
      });
      adminNotificationsList.addEventListener('click', (e) => {
        handleEditClick(e);
        handleDeleteClick(e);
      });

      // Allow Enter key to submit login
      adminPassword.addEventListener('keydown', (e) => {
        if (e.key === 'Enter') {
          e.preventDefault();
          handleLogin();
        }
      });

      // Close modal on Escape key
      window.addEventListener('keydown', (e) => {
        if (e.key === 'Escape' && !adminModal.classList.contains('hidden')) {
          hideAdminModal();
        }
      });

      // Initial render
      renderNotifications();
    })();
  </script>
 </body>
</html>
